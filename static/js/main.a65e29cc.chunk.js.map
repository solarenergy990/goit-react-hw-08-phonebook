{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactsList/ContactListItem/ContactListItem.module.css","components/Filter/Filter.module.css","components/ContactsList/ContactsLIst.module.css","redux/app/actions.js","redux/sevice/fetchContactAPI.js","redux/app/operations.js","components/ContactForm/ContactForm.js","components/ContactsList/ContactListItem/ContactListItem.js","redux/app/contacts-selectors.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","components/App/App.js","redux/app/reducer.js","redux/store.js","index.js"],"names":["module","exports","addContact","createAction","setContacts","deleteContact","contactFetchStarted","contactFetchFinished","contactFetchError","appActions","setFilter","axios","defaults","baseURL","contactAPI","getContacts","a","get","data","postContact","contact","post","contactId","console","log","delete","operations","postContactOperation","dispatch","result","getContactOperation","deleteContactOperation","ContactForm","useState","name","setName","number","setNumber","useDispatch","contacts","useSelector","state","appState","items","handleChange","evt","value","target","currentTarget","reset","className","onSubmit","preventDefault","newContact","id","shortid","map","toLowerCase","includes","alert","s","label","labelText","type","pattern","title","required","onChange","input","button","ContactListItem","contactName","contactNumber","onClickRemove","listItem","listText","onClick","appSelectors","contactList","contactFilter","filter","contactLoading","isLoading","contactError","error","ContactsList","useEffect","visibleContacts","color","height","width","length","Filter","defaultProps","App","createReducer","payload","_","combineReducers","rootReducer","appReducer","middleware","thunk","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,MAAQ,2BAA2B,UAAY,+BAA+B,MAAQ,2BAA2B,OAAS,8B,mBCA5ID,EAAOC,QAAU,CAAC,SAAW,kCAAkC,SAAW,kCAAkC,OAAS,kC,mBCArHD,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,MAAQ,wB,mBCAxDD,EAAOC,QAAU,CAAC,SAAW,iC,8KCCvBC,EAAaC,YAAa,kBAE1BC,EAAcD,YAAa,mBAE3BE,EAAgBF,YAAa,qBAE7BG,EAAsBH,YAAa,yBAEnCI,EAAuBJ,YAAa,yBAEpCK,EAAoBL,YAAa,yBAcxBM,EAVI,CACjBP,aACAE,cACAC,gBACAK,UANgBP,YAAa,iBAO7BG,sBACAC,uBACAC,qB,iBCrBFG,IAAMC,SAASC,QAAU,wBAEzB,IAqBeC,EANI,CACjBC,YAhBe,uCAAG,8BAAAC,EAAA,sEACKL,IAAMM,IAAI,aADf,uBACVC,EADU,EACVA,KADU,kBAEXA,GAFW,2CAAH,qDAiBfC,YAZe,uCAAG,WAAMC,GAAN,iBAAAJ,EAAA,sEACKL,IAAMU,KAAK,YAAaD,GAD7B,uBACVF,EADU,EACVA,KADU,kBAEXA,GAFW,2CAAH,sDAafb,cATiB,uCAAG,WAAMiB,GAAN,iBAAAN,EAAA,6DACpBO,QAAQC,IAAI,WAAYF,GADJ,SAEGX,IAAMc,OAAN,oBAA0BH,IAF7B,uBAEZJ,EAFY,EAEZA,KAFY,kBAGbA,GAHa,2CAAH,uDCTjBhB,EAOEO,EAPFP,WACAE,EAMEK,EANFL,YACAC,EAKEI,EALFJ,cAEAC,EAGEG,EAHFH,oBACAC,EAEEE,EAFFF,qBACAC,EACEC,EADFD,kBAgDakB,EANI,CACjBC,qBAxC2B,SAAAP,GAAO,8CAAI,WAAMQ,GAAN,eAAAZ,EAAA,6DAEtCY,EAAStB,KAF6B,kBAIfQ,EAAWK,YAAYC,GAJR,OAI9BS,EAJ8B,OAMpCD,EAAS1B,EAAW2B,IANgB,gDAQpCD,EAASpB,EAAkB,EAAD,KARU,yBAUpCoB,EAASrB,KAV2B,4EAAJ,uDAyClCuB,oBA3B0B,yDAAM,WAAMF,GAAN,eAAAZ,EAAA,6DAChCY,EAAStB,GAAoB,IADG,kBAGTQ,EAAWC,cAHF,OAGxBc,EAHwB,OAI9BD,EAASxB,EAAYyB,IAJS,gDAM9BD,EAASpB,EAAkB,EAAD,KANI,yBAQ9BoB,EAASrB,GAAqB,IARA,4EAAN,uDA4B1BwB,uBAhB6B,SAAAT,GAAS,8CAAI,WAAMM,GAAN,SAAAZ,EAAA,6DAC1CY,EAAStB,GAAoB,IADa,kBAGlCQ,EAAWT,cAAciB,GAHS,OAKxCM,EAASvB,EAAciB,IALiB,gDAOxCM,EAASpB,EAAkB,EAAD,KAPc,yBASxCoB,EAASrB,GAAqB,IATU,4EAAJ,wD,wBCoDzByB,EAnFK,WAClB,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEMT,EAAWU,cACXC,EAAWC,aAAY,SAAAC,GAC3B,OAAOA,EAAMC,SAASH,SAASI,SAG3BC,EAAe,SAAAC,GACnB,IAAQC,EAAUD,EAAIE,OAAdD,MAEuB,SAA3BD,EAAIG,cAAcd,MACpBC,EAAQW,GAEqB,WAA3BD,EAAIG,cAAcd,MACpBG,EAAUS,IAuBRG,EAAQ,WACZd,EAAQ,IACRE,EAAU,KAGZ,OACE,8BACE,sBAAMa,UAAU,OAAOC,SA1BN,SAAAN,GACnBA,EAAIO,iBAEJ,IACMC,EAAa,CAAEC,GADVC,MACcrB,OAAME,UAM/B,GAJ4BG,EAASiB,KAAI,SAAApC,GACvC,OAAOA,EAAQc,KAAKuB,iBAGEC,SAASL,EAAWnB,KAAKuB,eAE/C,OADAR,IACOU,MAAM,GAAD,OAAIN,EAAWnB,KAAf,4BAGdN,EAASF,EAAWC,qBAAqB0B,IACzCJ,KAUE,SACE,sBAAKC,UAAU,iBAAf,UACE,wBAAOA,UAAWU,IAAEC,MAApB,UACE,mBAAGX,UAAWU,IAAEE,UAAhB,kBACA,uBACEC,KAAK,OACL7B,KAAK,OACL8B,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,SAAUvB,EACVE,MAAOZ,EACPgB,UAAWU,IAAEQ,WAGjB,wBAAOlB,UAAWU,IAAEC,MAApB,UACE,mBAAGX,UAAWU,IAAEE,UAAhB,oBACA,uBACEC,KAAK,MACL7B,KAAK,SACL8B,QAAQ,yFACRC,MAAM,6iBACNC,UAAQ,EACRC,SAAUvB,EACVE,MAAOV,EACPc,UAAWU,IAAEQ,WAGjB,wBAAQL,KAAK,SAASb,UAAWU,IAAES,OAAnC,iC,iBCjEKC,EAbS,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,YAAaC,EAAmC,EAAnCA,cAAeC,EAAoB,EAApBA,cACrD,OACE,qBAAIvB,UAAWU,IAAEc,SAAjB,UACE,oBAAGxB,UAAWU,IAAEe,SAAhB,UACGJ,EADH,MACmBC,KAEnB,wBAAQT,KAAK,SAASb,UAAWU,IAAES,OAAQO,QAASH,EAApD,wB,0CCESI,EAPM,CACnBC,YANkB,SAAArC,GAAK,OAAIA,EAAMC,SAASH,SAASI,OAOnDoC,cANoB,SAAAtC,GAAK,OAAIA,EAAMC,SAASsC,QAO5CC,eANqB,SAAAxC,GAAK,OAAIA,EAAMC,SAASH,SAAS2C,WAOtDC,aANmB,SAAA1C,GAAK,OAAIA,EAAMC,SAASH,SAAS6C,QC8DvCC,EApDM,WACnB,IAAM9C,EAAWC,aAAY,SAAAC,GAAK,OAAIoC,EAAaC,YAAYrC,MACzDuC,EAASxC,aAAY,SAAAC,GAAK,OAAIoC,EAAaE,cAActC,MACzDyC,EAAY1C,aAAY,SAAAC,GAAK,OAAIoC,EAAaI,eAAexC,MAE7Db,GADQY,aAAY,SAAAC,GAAK,OAAIoC,EAAaM,aAAa1C,MAC5CH,eAEjBgD,qBAAU,WACR1D,EAASF,EAAWI,yBACnB,CAACF,IAEJ,IAIM2D,EAAkBhD,EAASyC,QAAO,SAAA5D,GACtC,OAAOA,EAAQc,KAAKuB,cAAcC,SAASsB,EAAOvB,kBAGpD,OAAIyB,EAEA,6BACE,cAAC,IAAD,CAAQnB,KAAK,QAAQyB,MAAM,UAAUC,OAAQ,GAAIC,MAAO,OAU5D,qBAAKxC,UAAWU,IAAErB,SAAlB,SACE,6BACGA,EAASoD,OAAS,GACjBJ,EAAgB/B,KAAI,SAAApC,GAClB,IAAQkC,EAAqBlC,EAArBkC,GAAIpB,EAAiBd,EAAjBc,KAAME,EAAWhB,EAAXgB,OAElB,OACE,cAAC,EAAD,CAEEmC,YAAarC,EACbsC,cAAepC,EACfqC,cAAe,kBAhCLnD,EAgC2BgC,EA/B1C1B,EAASF,EAAWK,uBAAuBT,IAD5B,IAAAA,IA6BLgC,W,iBC9CfsC,EAAS,WACb,IAAMZ,EAASxC,aAAY,SAAAC,GAAK,OAAIoC,EAAaE,cAActC,MAEzDb,EAAWU,cAGjB,OACE,kCACE,mBAAGY,UAAWU,IAAEC,MAAhB,mCACA,uBACEX,UAAWU,IAAEQ,MACbL,KAAK,OACLjB,MAAOkC,EACPb,SAAU,SAAAtB,GAAG,OATFC,EASeD,EAAIG,cAAcF,MATxBlB,EAASnB,EAAWC,UAAUoC,IAAvC,IAAAA,SAeJ8C,IAEfA,EAAOC,aAAe,CACpB/C,MAAO,ICxBT,I,EAcegD,EAdH,WACV,OACE,gCACE,2CACA,cAAC,EAAD,IAEA,0CACA,cAAC,EAAD,IAEA,cAAC,EAAD,Q,0DCFAvD,GAAWwD,YANI,CACnBpD,MAAO,GACPuC,WAAW,EACXE,MAAO,KAGqB,oBAC3B3E,EAAWP,YAAa,SAACuC,EAAD,GAAyB,IAAfuD,EAAc,EAAdA,QACjC,OAAO,6BACFvD,GADL,IAEEE,MAAM,GAAD,mBAAMF,EAAME,OAAZ,CAAmBqD,SAJA,eAO3BvF,EAAWJ,eAAgB,SAACoC,EAAD,GAAyB,IAAfuD,EAAc,EAAdA,QAGpC,OAAO,6BACFvD,GADL,IAEEE,MAAM,YAAKF,EAAME,MAAMqC,QAAO,SAAA5D,GAAO,OAAIA,EAAQkC,KAAO0C,WAZhC,eAe3BvF,EAAWL,aAAc,SAACqC,EAAD,GAAyB,IAAfuD,EAAc,EAAdA,QAElC,OADAzE,QAAQC,MACD,6BACFiB,GADL,IAEEE,MAAOqD,OAnBiB,eAsB3BvF,EAAWH,qBAAsB,SAACmC,EAAD,GAAyB,IAAfuD,EAAc,EAAdA,QAC1C,OAAO,6BACFvD,GADL,IAEEyC,UAAWc,OAzBa,eA4B3BvF,EAAWF,sBAAuB,SAACkC,EAAD,GAAyB,IAAfuD,EAAc,EAAdA,QAC3C,OAAO,6BACFvD,GADL,IAEEyC,UAAWc,OA/Ba,eAkC3BvF,EAAWD,mBAAoB,SAACiC,EAAD,GAAyB,IAAfuD,EAAc,EAAdA,QACxC,OAAO,6BACFvD,GADL,IAEE2C,MAAOY,OArCiB,IA0CxBhB,GAASe,YAAc,GAAD,gBACzBtF,EAAWC,WAAY,SAACuF,EAAD,GACtB,OAD0C,EAAdD,YAKjBE,eAAgB,CAAE3D,YAAUyC,Y,SC5CrCmB,GAAcD,YAAgB,CAClCxD,SAAU0D,KAGNC,GAAU,CACdC,MADc,mBAEXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,KAAOC,KAAWC,KAAOC,KAASC,KAAOC,UAJhD,CAOdC,OAQaC,GALDC,YAAe,CAC3BC,QAAShB,GACTE,gBCvBFe,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUL,MAAOA,GAAjB,SAEE,cAAC,EAAD,QAIJM,SAASC,eAAe,W","file":"static/js/main.a65e29cc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactForm_label__r4qMV\",\"labelText\":\"ContactForm_labelText__oIUcr\",\"input\":\"ContactForm_input__3OPhC\",\"button\":\"ContactForm_button__2s2lQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactListItem_listItem__23DDo\",\"listText\":\"ContactListItem_listText__3NvHA\",\"button\":\"ContactListItem_button__3kLvV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__32brh\",\"input\":\"Filter_input__2YY3d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactsLIst_contacts__1Xqyh\"};","import { createAction } from '@reduxjs/toolkit';\n\nconst addContact = createAction('app/addContact');\n\nconst setContacts = createAction('app/setContacts');\n\nconst deleteContact = createAction('app/deleteContact');\n\nconst contactFetchStarted = createAction('app/contactFetchStart');\n\nconst contactFetchFinished = createAction('app/contactFetchStart');\n\nconst contactFetchError = createAction('app/contactFetchError');\n\nconst setFilter = createAction('app/setFilter');\n\nconst appActions = {\n  addContact,\n  setContacts,\n  deleteContact,\n  setFilter,\n  contactFetchStarted,\n  contactFetchFinished,\n  contactFetchError,\n};\n\nexport default appActions;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'http://localhost:7777';\n\nconst getContacts = async () => {\n  const { data } = await axios.get('/contacts');\n  return data;\n};\n\nconst postContact = async contact => {\n  const { data } = await axios.post('/contacts', contact);\n  return data;\n};\nconst deleteContact = async contactId => {\n  console.log('fetch id', contactId);\n  const { data } = await axios.delete(`/contacts/${contactId}`);\n  return data;\n};\n\nconst contactAPI = {\n  getContacts,\n  postContact,\n  deleteContact,\n};\n\nexport default contactAPI;\n","import appActions from '../app/actions';\nimport contactAPI from '../sevice/fetchContactAPI';\n\nconst {\n  addContact,\n  setContacts,\n  deleteContact,\n\n  contactFetchStarted,\n  contactFetchFinished,\n  contactFetchError,\n} = appActions;\n\nconst postContactOperation = contact => async dispatch => {\n  //   console.log(contact);\n  dispatch(contactFetchStarted());\n  try {\n    const result = await contactAPI.postContact(contact);\n    // console.log('result in post', result);\n    dispatch(addContact(result));\n  } catch (error) {\n    dispatch(contactFetchError(error));\n  } finally {\n    dispatch(contactFetchFinished());\n  }\n};\n\nconst getContactOperation = () => async dispatch => {\n  dispatch(contactFetchStarted(true));\n  try {\n    const result = await contactAPI.getContacts();\n    dispatch(setContacts(result));\n  } catch (error) {\n    dispatch(contactFetchError(error));\n  } finally {\n    dispatch(contactFetchFinished(false));\n  }\n};\n\nconst deleteContactOperation = contactId => async dispatch => {\n  dispatch(contactFetchStarted(true));\n  try {\n    await contactAPI.deleteContact(contactId);\n\n    dispatch(deleteContact(contactId));\n  } catch (error) {\n    dispatch(contactFetchError(error));\n  } finally {\n    dispatch(contactFetchFinished(false));\n  }\n};\n\nconst operations = {\n  postContactOperation,\n  getContactOperation,\n  deleteContactOperation,\n};\n\nexport default operations;\n","import React, { useState } from 'react';\n\nimport shortid from 'shortid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport operations from '../../redux/app/operations';\n\nimport s from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => {\n    return state.appState.contacts.items;\n  });\n\n  const handleChange = evt => {\n    const { value } = evt.target;\n\n    if (evt.currentTarget.name === 'name') {\n      setName(value);\n    }\n    if (evt.currentTarget.name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const id = shortid();\n    const newContact = { id, name, number };\n\n    const checkedContactNames = contacts.map(contact => {\n      return contact.name.toLowerCase();\n    });\n\n    if (checkedContactNames.includes(newContact.name.toLowerCase())) {\n      reset();\n      return alert(`${newContact.name} is already in contacts`);\n    }\n\n    dispatch(operations.postContactOperation(newContact));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div>\n      <form className=\"form\" onSubmit={handleSubmit}>\n        <div className=\"form-container\">\n          <label className={s.label}>\n            <p className={s.labelText}>Name</p>\n            <input\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n              onChange={handleChange}\n              value={name}\n              className={s.input}\n            />\n          </label>\n          <label className={s.label}>\n            <p className={s.labelText}>Number</p>\n            <input\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n              onChange={handleChange}\n              value={number}\n              className={s.input}\n            />\n          </label>\n          <button type=\"submit\" className={s.button}>\n            Add contact\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactListItem.module.css';\n\nconst ContactListItem = ({ contactName, contactNumber, onClickRemove }) => {\n  return (\n    <li className={s.listItem}>\n      <p className={s.listText}>\n        {contactName} : {contactNumber}\n      </p>\n      <button type=\"button\" className={s.button} onClick={onClickRemove}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nexport default ContactListItem;\n\nContactListItem.propTypes = {\n  contactName: PropTypes.string.isRequired,\n  contactNumber: PropTypes.string.isRequired,\n  onClickRemove: PropTypes.func.isRequired,\n};\n","const contactList = state => state.appState.contacts.items;\nconst contactFilter = state => state.appState.filter;\nconst contactLoading = state => state.appState.contacts.isLoading;\nconst contactError = state => state.appState.contacts.error;\n\nconst appSelectors = {\n  contactList,\n  contactFilter,\n  contactLoading,\n  contactError,\n};\n\nexport default appSelectors;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport ContactListItem from '../ContactsList/ContactListItem/ContactListItem';\nimport s from './ContactsLIst.module.css';\n\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport Loader from 'react-loader-spinner';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport operations from '../../redux/app/operations';\nimport appSelectors from '../../redux/app/contacts-selectors';\n\nconst ContactsList = () => {\n  const contacts = useSelector(state => appSelectors.contactList(state));\n  const filter = useSelector(state => appSelectors.contactFilter(state));\n  const isLoading = useSelector(state => appSelectors.contactLoading(state));\n  const error = useSelector(state => appSelectors.contactError(state));\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(operations.getContactOperation());\n  }, [dispatch]);\n\n  const onDeleteContact = contactId => {\n    return dispatch(operations.deleteContactOperation(contactId));\n  };\n\n  const visibleContacts = contacts.filter(contact => {\n    return contact.name.toLowerCase().includes(filter.toLowerCase());\n  });\n\n  if (isLoading) {\n    return (\n      <h1>\n        <Loader type=\"Rings\" color=\"#00BFFF\" height={42} width={42} />\n      </h1>\n    );\n  }\n\n  if (error) {\n    <h1>oops, something went wrong...</h1>;\n  }\n\n  return (\n    <div className={s.contacts}>\n      <ul>\n        {contacts.length > 0 &&\n          visibleContacts.map(contact => {\n            const { id, name, number } = contact;\n\n            return (\n              <ContactListItem\n                key={id}\n                contactName={name}\n                contactNumber={number}\n                onClickRemove={() => onDeleteContact(id)}\n              />\n            );\n          })}\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactsList;\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport appActions from '../../redux/app/actions';\nimport appSelectors from '../../redux/app/contacts-selectors';\n\nconst Filter = () => {\n  const filter = useSelector(state => appSelectors.contactFilter(state));\n\n  const dispatch = useDispatch();\n  const onChange = value => dispatch(appActions.setFilter(value));\n\n  return (\n    <label>\n      <p className={s.label}>Find contacts by name</p>\n      <input\n        className={s.input}\n        type=\"text\"\n        value={filter}\n        onChange={evt => onChange(evt.currentTarget.value)}\n      ></input>\n    </label>\n  );\n};\n\nexport default Filter;\n\nFilter.defaultProps = {\n  value: '',\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n};\n","import React from 'react';\nimport ContactForm from '../ContactForm/ContactForm';\nimport ContactsList from '../ContactsList/ContactsList';\nimport Filter from '../Filter/Filter';\n\nconst App = () => {\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n\n      <ContactsList />\n    </div>\n  );\n};\n\nexport default App;\n","// import actionTypes from './types';\n\nimport { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport appActions from './actions';\n\nconst initialState = {\n  items: [],\n  isLoading: false,\n  error: '',\n};\n\nconst contacts = createReducer(initialState, {\n  [appActions.addContact]: (state, { payload }) => {\n    return {\n      ...state,\n      items: [...state.items, payload],\n    };\n  },\n  [appActions.deleteContact]: (state, { payload }) => {\n    // console.log('reducer payload', action);\n    // console.log('reducer state', state.items);\n    return {\n      ...state,\n      items: [...state.items.filter(contact => contact.id !== payload)],\n    };\n  },\n  [appActions.setContacts]: (state, { payload }) => {\n    console.log();\n    return {\n      ...state,\n      items: payload,\n    };\n  },\n  [appActions.contactFetchStarted]: (state, { payload }) => {\n    return {\n      ...state,\n      isLoading: payload,\n    };\n  },\n  [appActions.contactFetchFinished]: (state, { payload }) => {\n    return {\n      ...state,\n      isLoading: payload,\n    };\n  },\n  [appActions.contactFetchError]: (state, { payload }) => {\n    return {\n      ...state,\n      error: payload,\n    };\n  },\n});\n\nconst filter = createReducer('', {\n  [appActions.setFilter]: (_, { payload }) => {\n    return payload;\n  },\n});\n\nexport default combineReducers({ contacts, filter });\n","import { combineReducers } from 'redux';\n\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nimport appReducer from './app/reducer';\nimport thunk from 'redux-thunk';\n\nconst rootReducer = combineReducers({\n  appState: appReducer,\n});\n\nconst middleware = [\n  thunk,\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware,\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './components/App/App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}