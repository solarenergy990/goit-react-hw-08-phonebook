{"version":3,"sources":["redux/sevice/fetchUserAPI.js","redux/user/userActions.js","redux/user/userOperations.js","views/RegisterView.js","redux/user/userSelectors.js","views/LoginView.js","redux/app/actions.js","redux/sevice/fetchContactAPI.js","redux/app/operations.js","components/ContactForm/ContactForm.js","components/ContactsList/ContactListItem/ContactListItem.js","redux/app/contacts-selectors.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","views/ContactsView.js","components/UserMenu/UserMenu.js","components/Header/Header.js","components/Container/Container.js","components/App/App.js","redux/user/userReducer.js","redux/app/reducer.js","redux/store.js","index.js","components/Header/Header.module.css","components/ContactForm/ContactForm.module.css","components/ContactsList/ContactListItem/ContactListItem.module.css","components/ContactsList/ContactsLIst.module.css","components/Container/Container.module.css"],"names":["axios","defaults","baseURL","userAPI","postRegisteredUser","registerData","a","post","data","postLoggedInUser","loginData","getCurrentUser","get","postLoggedOutUser","registerUser","createAction","loginUser","logoutUser","currentUser","isLoading","userActions","userError","token","headers","common","Authorization","userOperations","registerOperation","dispatch","loginOperation","result","logoutOperation","getCurrentUserOperation","currentToken","RegisterView","useDispatch","useState","name","setName","email","setEmail","password","setPassword","handleChangeInput","evt","target","value","Form","onSubmit","preventDefault","Group","className","controlId","Label","Control","type","placeholder","pattern","title","required","onChange","Text","minLength","Check","label","Button","variant","userSelectors","getIsLoggedIn","state","auth","isLoggedIn","getUserMail","user","getToken","LoginView","loadingForm","useSelector","handleChange","currentTarget","color","height","width","addContact","setContacts","deleteContact","contactFetchStarted","contactFetchFinished","contactFetchError","appActions","setFilter","contactAPI","getContacts","postContact","contact","contactId","delete","operations","postContactOperation","console","log","getContactOperation","deleteContactOperation","ContactForm","number","setNumber","contacts","appState","items","reset","s","formContainer","newContact","id","shortid","map","toLowerCase","includes","alert","Row","Col","rows","ContactListItem","contactName","contactNumber","onClickRemove","listItem","listText","size","onClick","appSelectors","getContactList","getContactFilter","filter","getContactLoading","getContactError","error","ContactsList","useEffect","visibleContacts","length","Filter","defaultProps","ContactsView","UserMenu","userMail","Header","header","to","link","activeClassName","activeLink","exact","Container","children","container","App","loadingRoute","path","initialState","userReducer","createReducer","payload","_","combineReducers","persistConfig","key","storage","whitelist","middleware","thunk","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","persistReducer","appReducer","storeItems","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.a1a7bfa6.chunk.js","sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\nconst postRegisteredUser = async registerData => {\n  const { data } = await axios.post('/users/signup', registerData);\n  return data;\n};\n\nconst postLoggedInUser = async loginData => {\n  const { data } = await axios.post('/users/login', loginData);\n  return data;\n};\n\nconst getCurrentUser = async () => {\n  const { data } = await axios.get('/users/current');\n  return data;\n};\n\nconst postLoggedOutUser = async () => {\n  await axios.post('/users/logout');\n};\n\nconst userAPI = {\n  postRegisteredUser,\n  postLoggedInUser,\n  getCurrentUser,\n  postLoggedOutUser,\n};\n\nexport default userAPI;\n","import { createAction } from '@reduxjs/toolkit';\n\nconst registerUser = createAction('user/registerUser');\n\nconst loginUser = createAction('user/loginUser');\n\nconst logoutUser = createAction('user/logoutUser');\n\nconst currentUser = createAction('user/currentUser');\n\nconst isLoading = createAction('user/isLoading');\n\nconst userError = createAction('user/error');\n\nconst userActions = {\n  registerUser,\n  loginUser,\n  logoutUser,\n  currentUser,\n  userError,\n  isLoading,\n};\n\nexport default userActions;\n","import userAPI from '../sevice/fetchUserAPI';\nimport axios from 'axios';\nimport userActions from './userActions';\n\nconst {\n  registerUser,\n  loginUser,\n  logoutUser,\n  currentUser,\n  userError,\n  isLoading,\n} = userActions;\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n  unset() {\n    axios.defaults.headers.common.Authorization = '';\n  },\n};\n\nconst registerOperation = registerData => async dispatch => {\n  dispatch(isLoading(true));\n  try {\n    const data = await userAPI.postRegisteredUser(registerData);\n    token.set(data.token);\n    dispatch(registerUser(data));\n  } catch (error) {\n    dispatch(userError(error));\n  } finally {\n    dispatch(isLoading(false));\n  }\n};\n\nconst loginOperation = loginData => async dispatch => {\n  dispatch(isLoading(true));\n\n  try {\n    const result = await userAPI.postLoggedInUser(loginData);\n\n    token.set(result.token);\n    dispatch(loginUser(result));\n  } catch (error) {\n    dispatch(userError(error));\n  } finally {\n    dispatch(isLoading(false));\n  }\n};\n\nconst logoutOperation = () => async dispatch => {\n  try {\n    await userAPI.postLoggedOutUser();\n    token.unset();\n    dispatch(logoutUser());\n  } catch (error) {}\n};\n\nconst getCurrentUserOperation = currentToken => async dispatch => {\n  if (currentToken === null) {\n    return;\n  }\n  dispatch(isLoading(true));\n\n  token.set(currentToken);\n  try {\n    const result = await userAPI.getCurrentUser();\n    dispatch(currentUser(result));\n  } catch (error) {\n    dispatch(userError(error));\n  } finally {\n    dispatch(isLoading(false));\n  }\n};\n\nconst userOperations = {\n  registerOperation,\n  loginOperation,\n  logoutOperation,\n  getCurrentUserOperation,\n};\n\nexport default userOperations;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport userOperations from '../redux/user/userOperations';\nimport { Form, Button } from 'react-bootstrap';\n\nconst RegisterView = () => {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleChangeInput = evt => {\n    const { name, value } = evt.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    dispatch(userOperations.registerOperation({ name, email, password }));\n    reset();\n  };\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Form.Group className=\"mb-3\" controlId=\"formBasicName\">\n        <Form.Label>Name</Form.Label>\n        <Form.Control\n          type=\"text\"\n          placeholder=\"Enter your name\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={handleChangeInput}\n        />\n        <Form.Text className=\"text-muted\">\n          We'll never share your name with anyone else.\n        </Form.Text>\n      </Form.Group>\n      <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n        <Form.Label>Email address</Form.Label>\n        <Form.Control\n          type=\"email\"\n          placeholder=\"Enter email\"\n          name=\"email\"\n          value={email}\n          required\n          onChange={handleChangeInput}\n        />\n        <Form.Text className=\"text-muted\">\n          We'll never share your email with anyone else.\n        </Form.Text>\n      </Form.Group>\n\n      <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n        <Form.Label>Password</Form.Label>\n        <Form.Control\n          type=\"password\"\n          placeholder=\"Password\"\n          minLength=\"7\"\n          name=\"password\"\n          value={password}\n          required\n          onChange={handleChangeInput}\n        />\n      </Form.Group>\n      <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\n        <Form.Check type=\"checkbox\" label=\"Confirm Your data\" required />\n      </Form.Group>\n      <Button variant=\"primary\" type=\"submit\">\n        Register\n      </Button>\n    </Form>\n  );\n};\n\nexport default RegisterView;\n","const getIsLoggedIn = state => state.auth.isLoggedIn;\nconst getUserMail = state => state.auth.user.email;\nconst getToken = state => state.auth.token;\nconst isLoading = state => state.auth.isLoading;\n\nconst userSelectors = {\n  getIsLoggedIn,\n  getUserMail,\n  getToken,\n  isLoading,\n};\n\nexport default userSelectors;\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport userSelectors from '../redux/user/userSelectors';\nimport userOperations from '../redux/user/userOperations';\n\nimport { Form, Button } from 'react-bootstrap';\nimport Loader from 'react-loader-spinner';\n\nconst LoginView = () => {\n  const loadingForm = useSelector(state => userSelectors.isLoading(state));\n\n  const dispatch = useDispatch();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleChange = evt => {\n    const { value } = evt.target;\n\n    if (evt.currentTarget.name === 'email') {\n      setEmail(value);\n    }\n    if (evt.currentTarget.name === 'password') {\n      setPassword(value);\n    }\n  };\n\n  const reset = () => {\n    setEmail('');\n    setPassword('');\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    dispatch(userOperations.loginOperation({ email, password }));\n    reset();\n  };\n\n  return (\n    <>\n      {loadingForm ? (\n        <Loader type=\"Rings\" color=\"#00BFFF\" height={42} width={42} />\n      ) : (\n        <Form onSubmit={handleSubmit}>\n          <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n            <Form.Label>Email address</Form.Label>\n            <Form.Control\n              type=\"email\"\n              placeholder=\"Enter email\"\n              onChange={handleChange}\n              name=\"email\"\n              value={email}\n            />\n            <Form.Text className=\"text-muted\">\n              We'll never share your email with anyone else.\n            </Form.Text>\n          </Form.Group>\n\n          <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              placeholder=\"Password\"\n              onChange={handleChange}\n              minLength=\"7\"\n              name=\"password\"\n              value={password}\n            />\n          </Form.Group>\n          <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\n            <Form.Check type=\"checkbox\" label=\"Confirm your data\" required />\n          </Form.Group>\n          <Button variant=\"primary\" type=\"submit\">\n            Login\n          </Button>\n        </Form>\n      )}{' '}\n    </>\n  );\n};\n\nexport default LoginView;\n\n// {\n//   loading ? <Loading /> : <LoginForm />;\n// }\n","import { createAction } from '@reduxjs/toolkit';\n\nconst addContact = createAction('app/addContact');\n\nconst setContacts = createAction('app/setContacts');\n\nconst deleteContact = createAction('app/deleteContact');\n\nconst contactFetchStarted = createAction('app/contactFetchStart');\n\nconst contactFetchFinished = createAction('app/contactFetchStart');\n\nconst contactFetchError = createAction('app/contactFetchError');\n\nconst setFilter = createAction('app/setFilter');\n\nconst appActions = {\n  addContact,\n  setContacts,\n  deleteContact,\n  setFilter,\n  contactFetchStarted,\n  contactFetchFinished,\n  contactFetchError,\n};\n\nexport default appActions;\n","import axios from 'axios';\n\n// axios.defaults.baseURL = 'http://localhost:7777';\n\nconst getContacts = async () => {\n  const { data } = await axios.get('/contacts');\n  return data;\n};\n\nconst postContact = async contact => {\n  const { data } = await axios.post('/contacts', contact);\n  return data;\n};\nconst deleteContact = async contactId => {\n  // console.log('fetch id', contactId);\n  const { data } = await axios.delete(`/contacts/${contactId}`);\n  return data;\n};\n\nconst contactAPI = {\n  getContacts,\n  postContact,\n  deleteContact,\n};\n\nexport default contactAPI;\n","import appActions from '../app/actions';\nimport contactAPI from '../sevice/fetchContactAPI';\n\nconst {\n  addContact,\n  setContacts,\n  deleteContact,\n\n  contactFetchStarted,\n  contactFetchFinished,\n  contactFetchError,\n} = appActions;\n\nconst postContactOperation = contact => async dispatch => {\n  //   console.log(contact);\n  dispatch(contactFetchStarted());\n  try {\n    const result = await contactAPI.postContact(contact);\n    console.log('result in post', result);\n    dispatch(addContact(contact));\n  } catch (error) {\n    dispatch(contactFetchError(error));\n  } finally {\n    dispatch(contactFetchFinished());\n  }\n};\n\nconst getContactOperation = () => async dispatch => {\n  dispatch(contactFetchStarted(true));\n  try {\n    const result = await contactAPI.getContacts();\n    dispatch(setContacts(result));\n  } catch (error) {\n    dispatch(contactFetchError(error));\n  } finally {\n    dispatch(contactFetchFinished(false));\n  }\n};\n\nconst deleteContactOperation = contactId => async dispatch => {\n  dispatch(contactFetchStarted(true));\n  try {\n    await contactAPI.deleteContact(contactId);\n\n    dispatch(deleteContact(contactId));\n  } catch (error) {\n    dispatch(contactFetchError(error));\n  } finally {\n    dispatch(contactFetchFinished(false));\n  }\n};\n\nconst operations = {\n  postContactOperation,\n  getContactOperation,\n  deleteContactOperation,\n};\n\nexport default operations;\n","import React, { useState } from 'react';\n\nimport shortid from 'shortid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport operations from '../../redux/app/operations';\n\nimport { Form, Button, Row, Col } from 'react-bootstrap';\nimport s from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => {\n    return state.appState.contacts.items;\n  });\n\n  const handleChange = evt => {\n    const { value } = evt.target;\n\n    if (evt.currentTarget.name === 'name') {\n      setName(value);\n    }\n    if (evt.currentTarget.name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const id = shortid();\n    const newContact = { id, name, number };\n\n    const checkedContactNames = contacts.map(contact => {\n      return contact.name.toLowerCase();\n    });\n\n    if (checkedContactNames.includes(newContact.name.toLowerCase())) {\n      reset();\n      return alert(`${newContact.name} is already in contacts`);\n    }\n\n    dispatch(operations.postContactOperation(newContact));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div className={s.formContainer}>\n      <Form onSubmit={handleSubmit}>\n        <Row>\n          <Col className={s.rows}>\n            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n              <Form.Label>Name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Enter your name\"\n                onChange={handleChange}\n                name=\"name\"\n                value={name}\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              />\n            </Form.Group>\n          </Col>\n          <Col className={s.rows}>\n            <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n              <Form.Label>Number</Form.Label>\n              <Form.Control\n                type=\"tel\"\n                placeholder=\"Enter your number\"\n                onChange={handleChange}\n                name=\"number\"\n                value={number}\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              />\n            </Form.Group>\n          </Col>\n\n          <Col className={s.rows}>\n            <Button variant=\"primary\" type=\"submit\">\n              Add contact\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    </div>\n  );\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactListItem.module.css';\n\nimport { Button } from 'react-bootstrap';\n\nconst ContactListItem = ({ contactName, contactNumber, onClickRemove }) => {\n  return (\n    <li className={s.listItem}>\n      <p className={s.listText}>\n        {contactName} : {contactNumber}\n      </p>\n      <div className=\"mb-2\">\n        <Button variant=\"danger\" size=\"sm\" onClick={onClickRemove}>\n          Delete\n        </Button>{' '}\n      </div>\n    </li>\n  );\n};\n\nexport default ContactListItem;\n\nContactListItem.propTypes = {\n  contactName: PropTypes.string.isRequired,\n  contactNumber: PropTypes.string.isRequired,\n  onClickRemove: PropTypes.func.isRequired,\n};\n","const getContactList = state => state.appState.contacts.items;\nconst getContactFilter = state => state.appState.filter;\nconst getContactLoading = state => state.appState.contacts.isLoading;\nconst getContactError = state => state.appState.contacts.error;\n\nconst appSelectors = {\n  getContactList,\n  getContactFilter,\n  getContactLoading,\n  getContactError,\n};\n\nexport default appSelectors;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport ContactListItem from '../ContactsList/ContactListItem/ContactListItem';\nimport s from './ContactsLIst.module.css';\n\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport Loader from 'react-loader-spinner';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport operations from '../../redux/app/operations';\nimport appSelectors from '../../redux/app/contacts-selectors';\n\nconst ContactsList = () => {\n  const contacts = useSelector(state => appSelectors.getContactList(state));\n  const filter = useSelector(state => appSelectors.getContactFilter(state));\n  const isLoading = useSelector(state => appSelectors.getContactLoading(state));\n  const error = useSelector(state => appSelectors.getContactError(state));\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(operations.getContactOperation());\n  }, [dispatch]);\n\n  const onDeleteContact = contactId => {\n    return dispatch(operations.deleteContactOperation(contactId));\n  };\n\n  const visibleContacts = contacts.filter(contact => {\n    return contact.name.toLowerCase().includes(filter.toLowerCase());\n  });\n\n  if (isLoading) {\n    return (\n      <h1>\n        <Loader type=\"Rings\" color=\"#00BFFF\" height={42} width={42} />\n      </h1>\n    );\n  }\n\n  if (error) {\n    <h1>oops, something went wrong...</h1>;\n  }\n\n  return (\n    <div className={s.contacts}>\n      <ul>\n        {contacts.length > 0 &&\n          visibleContacts.map(contact => {\n            const { id, name, number } = contact;\n\n            return (\n              <ContactListItem\n                key={id}\n                contactName={name}\n                contactNumber={number}\n                onClickRemove={() => onDeleteContact(id)}\n              />\n            );\n          })}\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactsList;\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport appActions from '../../redux/app/actions';\nimport appSelectors from '../../redux/app/contacts-selectors';\nimport { Form } from 'react-bootstrap';\n\nconst Filter = () => {\n  const filter = useSelector(state => appSelectors.getContactFilter(state));\n\n  const dispatch = useDispatch();\n  const onChange = value => dispatch(appActions.setFilter(value));\n\n  return (\n    <Form>\n      <Form.Group className=\"mb-3\" controlId=\"formGroupEmail\">\n        <Form.Label>Find contacts by name</Form.Label>\n        <Form.Control\n          type=\"text\"\n          placeholder=\"Start typing contact name\"\n          value={filter}\n          onChange={evt => onChange(evt.currentTarget.value)}\n        />\n      </Form.Group>\n    </Form>\n  );\n};\n\nexport default Filter;\n\nFilter.defaultProps = {\n  value: '',\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n};\n","import React from 'react';\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport ContactsList from '../components/ContactsList/ContactsList';\nimport Filter from '../components/Filter/Filter';\n\nconst ContactsView = () => {\n  return (\n    <>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactsList />\n    </>\n  );\n};\n\nexport default ContactsView;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport userSelectors from '../../redux/user/userSelectors';\nimport userOperations from '../../redux/user/userOperations';\nimport { Button } from 'react-bootstrap';\n\nconst UserMenu = () => {\n  const userMail = useSelector(state => userSelectors.getUserMail(state));\n  const dispatch = useDispatch();\n  return (\n    <>\n      <p>Welcome {userMail}</p>\n\n      <div className=\"mb-2\">\n        <Button\n          variant=\"secondary\"\n          size=\"sm\"\n          onClick={() => dispatch(userOperations.logoutOperation())}\n        >\n          LogOut\n        </Button>{' '}\n      </div>\n    </>\n  );\n};\n\nexport default UserMenu;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport UserMenu from '../UserMenu/UserMenu';\nimport s from '../Header/Header.module.css';\nimport userSelectors from '../../redux/user/userSelectors';\n\nconst Header = () => {\n  const isLoggedIn = useSelector(state => userSelectors.getIsLoggedIn(state));\n\n  return (\n    <header className={s.header}>\n      <h2>Phonebook</h2>\n      <nav>\n        {isLoggedIn ? (\n          <UserMenu />\n        ) : (\n          <>\n            <NavLink\n              to=\"/register\"\n              className={s.link}\n              activeClassName={s.activeLink}\n              exact\n            >\n              Register\n            </NavLink>\n            <NavLink\n              to=\"/login\"\n              className={s.link}\n              activeClassName={s.activeLink}\n            >\n              Login\n            </NavLink>\n          </>\n        )}\n      </nav>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport s from '../Container/Container.module.css';\nimport PropTypes from 'prop-types';\n\nconst Container = ({ children }) => {\n  return <div className={s.container}>{children}</div>;\n};\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Container;\n","import React, { useEffect } from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport RegisterView from '../../views/RegisterView';\nimport LoginView from '../../views/LoginView';\nimport ContactsView from '../../views/ContactsView';\nimport Header from '../Header/Header';\nimport Container from '../Container/Container';\nimport userSelectors from '../../redux/user/userSelectors';\nimport userOperations from '../../redux/user/userOperations';\n\nimport Loader from 'react-loader-spinner';\n\nconst { getIsLoggedIn, getToken, isLoading } = userSelectors;\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector(state => getIsLoggedIn(state));\n  const token = useSelector(state => getToken(state));\n  const loadingRoute = useSelector(state => isLoading(state));\n\n  useEffect(() => {\n    dispatch(userOperations.getCurrentUserOperation(token));\n  }, [dispatch, token]);\n\n  return (\n    <Container>\n      <Header />\n\n      {loadingRoute ? (\n        <Loader type=\"Rings\" color=\"#00BFFF\" height={42} width={42} />\n      ) : (\n        <Switch>\n          <Route path=\"/contacts\">\n            {isLoggedIn ? <ContactsView /> : <Redirect to=\"/login\" />}\n          </Route>\n          <Route path=\"/login\">\n            {!isLoggedIn ? <LoginView /> : <Redirect to=\"/contacts\" />}\n          </Route>\n          <Route path=\"/register\">\n            {!isLoggedIn ? <RegisterView /> : <Redirect to=\"/contacts\" />}\n          </Route>\n        </Switch>\n      )}\n    </Container>\n  );\n};\n\nexport default App;\n","import { createReducer } from '@reduxjs/toolkit';\nimport userActions from '../user/userActions';\n\nconst initialState = {\n  user: { name: null, email: null },\n  token: null,\n  isLoggedIn: false,\n  isLoading: false,\n};\n\nconst userReducer = createReducer(initialState, {\n  [userActions.registerUser]: (state, { payload }) => {\n    console.log('register payload', payload);\n    return {\n      ...state,\n      user: payload.user,\n      token: payload.token,\n      isLoggedIn: true,\n    };\n  },\n  [userActions.loginUser]: (state, { payload }) => {\n    return {\n      ...state,\n      user: payload.user,\n      token: payload.token,\n      isLoggedIn: true,\n    };\n  },\n  [userActions.logoutUser]: state => initialState,\n  [userActions.currentUser]: (state, { payload }) => {\n    return {\n      ...state,\n      user: payload,\n      isLoggedIn: true,\n    };\n  },\n  [userActions.isLoading]: (state, { payload }) => ({\n    ...state,\n    isLoading: payload,\n  }),\n});\n\nexport default userReducer;\n","// import actionTypes from './types';\n\nimport { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport appActions from './actions';\n\nconst initialState = {\n  items: [],\n  isLoading: false,\n  error: '',\n};\n\nconst contacts = createReducer(initialState, {\n  [appActions.addContact]: (state, { payload }) => {\n    return {\n      ...state,\n      items: [...state.items, payload],\n    };\n  },\n  [appActions.deleteContact]: (state, { payload }) => {\n    // console.log('reducer payload', action);\n    // console.log('reducer state', state.items);\n    return {\n      ...state,\n      items: [...state.items.filter(contact => contact.id !== payload)],\n    };\n  },\n  [appActions.setContacts]: (state, { payload }) => {\n    console.log();\n    return {\n      ...state,\n      items: payload,\n    };\n  },\n  [appActions.contactFetchStarted]: (state, { payload }) => {\n    return {\n      ...state,\n      isLoading: payload,\n    };\n  },\n  [appActions.contactFetchFinished]: (state, { payload }) => {\n    return {\n      ...state,\n      isLoading: payload,\n    };\n  },\n  [appActions.contactFetchError]: (state, { payload }) => {\n    return {\n      ...state,\n      error: payload,\n    };\n  },\n});\n\nconst filter = createReducer('', {\n  [appActions.setFilter]: (_, { payload }) => {\n    return payload;\n  },\n});\n\nexport default combineReducers({ contacts, filter });\n","// import { combineReducers } from 'redux';\n\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n// import logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport userReducer from '../redux/user/userReducer';\n\nimport appReducer from './app/reducer';\nimport thunk from 'redux-thunk';\n\nconst persistConfig = {\n  key: 'auth',\n  storage,\n  whitelist: ['token'],\n};\n\n// const rootReducer = combineReducers({\n//   appState: appReducer,\n//   auth: persistReducer(persistConfig, userReducer),\n// });\n\nconst middleware = [\n  thunk,\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  // logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    auth: persistReducer(persistConfig, userReducer),\n    appState: appReducer,\n  },\n  middleware,\n});\n\nconst persistor = persistStore(store);\n\nconst storeItems = {\n  store,\n  persistor,\n};\n\nexport default storeItems;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './components/App/App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// console.log(store);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1iJzT\",\"link\":\"Header_link__2vqk0\",\"activeLink\":\"Header_activeLink__1VD52\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactForm_label__r4qMV\",\"labelText\":\"ContactForm_labelText__oIUcr\",\"input\":\"ContactForm_input__3OPhC\",\"button\":\"ContactForm_button__2s2lQ\",\"formContainer\":\"ContactForm_formContainer__2MCEU\",\"rows\":\"ContactForm_rows__29zdR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactListItem_listItem__23DDo\",\"listText\":\"ContactListItem_listText__3NvHA\",\"button\":\"ContactListItem_button__3kLvV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactsLIst_contacts__1Xqyh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__nLAz0\"};"],"sourceRoot":""}